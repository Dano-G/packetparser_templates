<?xml version="1.0" encoding="utf-8"?>
<Templates format="2" protocolVersion="72" >
  <Template revision="1.0" id= "9d811643-fb6e-46d5-8da4-b9ba7acc240f" >
    <SuggestedCCUParameters />
    <RevisionHistory>
      <Revision id="1.0">Initial version</Revision>
    </RevisionHistory>
    <Name>Shelly Duo</Name>
    <CcuModel>PacketParserCCU</CcuModel>
    <Producer></Producer>
    <Model></Model>
    <Description></Description>
    <ImportParameters>
        <Parameter>
            <Name>${ipAddress}</Name>	
            <Value>192.168.0.1</Value>
            <Id>IpAddress</Id>
        </Parameter>
    </ImportParameters>    
    <Module>
      <Name>Shelly Duo</Name>
      <Id>-1</Id>
      <Model>PacketParserModuleHttp</Model>
      <DeviceProperties>
        <InternalPollInterval>5000</InternalPollInterval>
        <ServiceAttributesScriptsPacketParser>[{"AttributeDefinition":{"Name":"Type"},"ReadFormula":" VAR response := SENDHTTPREQUEST(\u0022/settings/night_mode\u0022);\r\n IF response.IsSuccess\r\n  VAR content := response.Content;\r\n  RETURN(PARSEJSON(content, \u0022$.device.type\u0022));\r\n  End"},{"AttributeDefinition":{"Name":"MAC"},"ReadFormula":" VAR response := SENDHTTPREQUEST(\u0022/settings/night_mode\u0022);\r\n IF response.IsSuccess\r\n  VAR content := response.Content;\r\n  RETURN(PARSEJSON(content, \u0022$.device.mac\u0022));\r\n  End"},{"AttributeDefinition":{"Name":"Wifi"},"ReadFormula":" VAR response := SENDHTTPREQUEST(\u0022/settings/night_mode\u0022);\r\n IF response.IsSuccess\r\n  VAR content := response.Content;\r\n  RETURN(PARSEJSON(content, \u0022$.wifi_sta.ssid\u0022));\r\n  End"},{"AttributeDefinition":{"Name":"Ipv4 Method"},"ReadFormula":" VAR response := SENDHTTPREQUEST(\u0022/settings/night_mode\u0022);\r\n IF response.IsSuccess\r\n  VAR content := response.Content;\r\n  RETURN(PARSEJSON(content, \u0022$.wifi_sta.ipv4_method\u0022));\r\n  End"}]</ServiceAttributesScriptsPacketParser>
        <Port>80</Port>
        <UseHttps>False</UseHttps>
      </DeviceProperties>
      <Devices>
        <Device>
          <Name>Blue</Name>
          <Model>PacketParserDimmer</Model>
          <Id>-2</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <ReadLevelScriptPacketParser> VAR response := SENDHTTPREQUEST("/light/0");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "blue")/255);
  ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END</ReadLevelScriptPacketParser>
            <WriteLevelScriptPacketParser> VAR response := SENDHTTPREQUEST("/light/0?blue=" + Le*255);
 IF response.IsSuccess = false
  ADDERROR(response.StatusCode);
 END</WriteLevelScriptPacketParser>
            <IconId>3006</IconId>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Brightness</Name>
          <Model>PacketParserDimmer</Model>
          <Id>-3</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <ReadLevelScriptPacketParser>
 VAR response := SENDHTTPREQUEST("/color/0");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "brightness")/100);
 ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END

# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/getValue", "GET", "some data", "header1:value1", "header2:value2", ...);
# OR
# VAR request := HTTPREQUEST("/example/getValue", "POST", "some data");
# request.headers := { "header1:value1", "header2:value2", ...};
# request.method := "GET";
# request.data := null;
# VAR response := SENDHTTPREQUEST(request);
#
#
# Send TCP, UDP data:
# VAR data1 := BYTECOLLECTION("0a bb ea df 01");
# SENDDATA(data1);
# VAR data2 := "{\"name\":\"John\", \"age\":32}";
# SENDDATA(data2);
# VAR data3 := TOBYTES("{\"name\":\"John\", \"age\":32}", "iso-8859-1");
# SENDDATA(data3);
# Process received TCP or UDP data and set device values in the Listener script
#
#
# Download data from FTP:
# FTPDOWNLOAD("filePath");</ReadLevelScriptPacketParser>
            <WriteLevelScriptPacketParser>
 VAR response := SENDHTTPREQUEST("/light/0?brightness=" + Le*100);
IF response.IsSuccess = false
 ADDERROR(response.StatusCode);
 END
 
 
 VAR response2 := SENDHTTPREQUEST("/light/0?gain=" + Le*100);
 IF response2.IsSuccess = false
 ADDERROR(response2.StatusCode);
 END

# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/setValue", "GET", "value=" + Le, "header1:value1", "header2:value2", ...);\r
# Or VAR request := HTTPREQUEST("/example/setValue");
# request.Method := "PUT";
# VAR response := SENDHTTPREQUEST(request);
#r
#
# Send TCP, UDP data:
# VAR data1 := "{\"name\":\"John\", \"age\":" + Le + "}";
# SENDDATA(data1);
# VAR data2 := TOBYTES("{\"name\":\"John\", \"age\":" + Le + "}", "iso-8859-1");
# SENDDATA(data2);
# You can process received TCP or UDP data in the Listener script
#
#
# Upload data to FTP:
# FTPUPLOAD("filePath", "somedata=" + Le, "write"); # use "append" mode to append data to existing file</WriteLevelScriptPacketParser>
            <IconId>3001</IconId>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Color</Name>
          <Model>PacketParserMultiValueSwitch</Model>
          <Id>-4</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser>[{"AttributeDefinition":{"Name":"Red"},"ReadFormula":"VAR response := SENDHTTPREQUEST(\u0022/light/0\u0022);\r\n VAR content := response.Content;\r\n RETURN(PARSEJSON(content, \u0022red\u0022));\r\n"},{"AttributeDefinition":{"Name":"Green"},"ReadFormula":"VAR response := SENDHTTPREQUEST(\u0022/light/0\u0022);\r\n VAR content := response.Content;\r\n RETURN(PARSEJSON(content, \u0022green\u0022));"},{"AttributeDefinition":{"Name":"Blue"},"ReadFormula":"VAR response := SENDHTTPREQUEST(\u0022/light/0\u0022);\r\n VAR content := response.Content;\r\n RETURN(PARSEJSON(content, \u0022blue\u0022));"}]</ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser>[{"ActionDefinition":{"Name":"Color Change","NumericParameters":[{"FriendlyName":"Red [0-255]","Abbreviation":"red","IsFloat":false,"MinValue":0,"MaxValue":255},{"FriendlyName":"Green [0-255]","Abbreviation":"green","IsFloat":false,"MinValue":0,"MaxValue":255},{"FriendlyName":"Blue [0-255]","Abbreviation":"blue","IsFloat":false,"MinValue":0,"MaxValue":255}],"BoolParameters":[],"EnumParameters":[]},"Script":"SENDHTTPREQUEST(\u0022/color/0?red=\u0022 \u002B red);\r\nSENDHTTPREQUEST(\u0022/color/0?green=\u0022 \u002B green);\r\nSENDHTTPREQUEST(\u0022/color/0?blue=\u0022 \u002B blue);\r\n\r\n"}]</ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <Value0Index>1</Value0Index>
            <Value1Index>2</Value1Index>
            <Value2Index>3</Value2Index>
            <Value3Index>4</Value3Index>
            <Value4Index>5</Value4Index>
            <Value5Index>6</Value5Index>
            <Value6Index>0</Value6Index>
            <Value7Index>71</Value7Index>
            <Value8Index>72</Value8Index>
            <Value9Index>73</Value9Index>
            <Value0Name>Red</Value0Name>
            <Value1Name>Green</Value1Name>
            <Value2Name>Blue</Value2Name>
            <Value3Name>Yellow</Value3Name>
            <Value4Name>Purple</Value4Name>
            <Value5Name>Cyan</Value5Name>
            <Value6Name>White</Value6Name>
            <Value7Name>7</Value7Name>
            <Value8Name>8</Value8Name>
            <Value9Name>9</Value9Name>
            <Value0IconId>327</Value0IconId>
            <Value1IconId>329</Value1IconId>
            <Value2IconId>331</Value2IconId>
            <Value3IconId>328</Value3IconId>
            <Value4IconId>332</Value4IconId>
            <Value5IconId>330</Value5IconId>
            <Value6IconId>334</Value6IconId>
            <Value7IconId>12</Value7IconId>
            <Value8IconId>13</Value8IconId>
            <Value9IconId>14</Value9IconId>
            <OffStateValue>-1</OffStateValue>
            <ReadSwitchStateScriptPacketParser></ReadSwitchStateScriptPacketParser>
            <WriteSwitchStateScriptPacketParser># Simple HTTP Request:
VAR response := SENDHTTPREQUEST("/color/0");
IF Mu = 0
 response := SENDHTTPREQUEST("/color/0?red=255");
 SENDHTTPREQUEST("/color/0?green=0");
 SENDHTTPREQUEST("/color/0?blue=0");
 IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END
 
 IF Mu = 1
 response := SENDHTTPREQUEST("/color/0?red=0");
 SENDHTTPREQUEST("/color/0?green=255");
 SENDHTTPREQUEST("/color/0?blue=0");
 IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END
 
  IF Mu = 2
  response := SENDHTTPREQUEST("/color/0?red=0");
  SENDHTTPREQUEST("/color/0?green=0");
  SENDHTTPREQUEST("/color/0?blue=255");
  IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END
   IF Mu = 3
   response := SENDHTTPREQUEST("/color/0?red=255");
   SENDHTTPREQUEST("/color/0?green=255");
  SENDHTTPREQUEST("/color/0?blue=0");
  IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END
 
   IF Mu = 4
  response := SENDHTTPREQUEST("/color/0?red=255");
  SENDHTTPREQUEST("/color/0?green=0");
  SENDHTTPREQUEST("/color/0?blue=255");
  IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END

    IF Mu = 5
    response := SENDHTTPREQUEST("/color/0?red=0");
    SENDHTTPREQUEST("/color/0?green=255");
  SENDHTTPREQUEST("/color/0?blue=255");
  IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END
 
 IF Mu = 6
     response := SENDHTTPREQUEST("/color/0?red=255");
    SENDHTTPREQUEST("/color/0?green=255");
  SENDHTTPREQUEST("/color/0?blue=255");
  IF(response.IsSuccess = false, ADDERROR(response.StatusCode));
 END</WriteSwitchStateScriptPacketParser>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Effect</Name>
          <Model>PacketParserMultiValueSwitch</Model>
          <Id>-5</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <Value0Index>0</Value0Index>
            <Value1Index>1</Value1Index>
            <Value2Index>2</Value2Index>
            <Value3Index>3</Value3Index>
            <Value4Index>68</Value4Index>
            <Value5Index>69</Value5Index>
            <Value6Index>70</Value6Index>
            <Value7Index>71</Value7Index>
            <Value8Index>72</Value8Index>
            <Value9Index>73</Value9Index>
            <Value0Name>Effects Off</Value0Name>
            <Value1Name>Meteor Shower</Value1Name>
            <Value2Name>Gradual Change</Value2Name>
            <Value3Name>Flash</Value3Name>
            <Value4Name>4</Value4Name>
            <Value5Name>5</Value5Name>
            <Value6Name>6</Value6Name>
            <Value7Name>7</Value7Name>
            <Value8Name>8</Value8Name>
            <Value9Name>9</Value9Name>
            <Value0IconId>41</Value0IconId>
            <Value1IconId>43</Value1IconId>
            <Value2IconId>42</Value2IconId>
            <Value3IconId>44</Value3IconId>
            <Value4IconId>9</Value4IconId>
            <Value5IconId>10</Value5IconId>
            <Value6IconId>11</Value6IconId>
            <Value7IconId>12</Value7IconId>
            <Value8IconId>13</Value8IconId>
            <Value9IconId>14</Value9IconId>
            <OffStateValue>0</OffStateValue>
            <ReadSwitchStateScriptPacketParser>
 VAR response := SENDHTTPREQUEST("/settings/light/0");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "effect"));
 ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END
</ReadSwitchStateScriptPacketParser>
            <WriteSwitchStateScriptPacketParser> VAR response := SENDHTTPREQUEST("/settings/light/0?effect=" + Mu);
 IF response.IsSuccess = false
  ADDERROR(response.StatusCode);
 END

# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/setValue", "GET", "value=" + Mu, "header1:value1", "header2:value2", ...);\r
# Or VAR request := HTTPREQUEST("/example/setValue");
# request.Method := "PUT";
# VAR response := SENDHTTPREQUEST(request);
#r
#
# Send TCP, UDP data:
# VAR data1 := "{\"name\":\"John\", \"age\":" + Mu + "}";
# SENDDATA(data1);
# VAR data2 := TOBYTES("{\"name\":\"John\", \"age\":" + Mu + "}", "iso-8859-1");
# SENDDATA(data2);
# You can process received TCP or UDP data in the Listener script
#
#
# Upload data to FTP:
# FTPUPLOAD("filePath", "somedata=" + Mu, "write"); # use "append" mode to append data to existing file</WriteSwitchStateScriptPacketParser>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Electricity Meter</Name>
          <Model>PacketParserElectricityMeter</Model>
          <Id>-6</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>15000</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser>[{"AttributeDefinition":{"Name":"State"},"ReadFormula":" VAR response := SENDHTTPREQUEST(\u0022/status\u0022);\r\n  VAR content := response.Content;\r\n  var state := PARSEJSON(content, \u0022$.meters[:1].is_valid\u0022);\r\n  var res := IF(state = true, \u0022Ok\u0022, \u0022Error\u0022 );\r\n  RETURN(res);"}]</ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ReadTotalConsumptionScriptPacketParser> VAR response := SENDHTTPREQUEST("/status");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "$.meters[:1].power")/60000);
 ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END</ReadTotalConsumptionScriptPacketParser>
            <ReadDemandScriptPacketParser> VAR response := SENDHTTPREQUEST("/status");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "$.meters[:1].power")/1000);
 ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END
</ReadDemandScriptPacketParser>
            <Calibration>0</Calibration>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Green</Name>
          <Model>PacketParserDimmer</Model>
          <Id>-7</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <ReadLevelScriptPacketParser> VAR response := SENDHTTPREQUEST("/light/0");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "green")/255);
  ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END
</ReadLevelScriptPacketParser>
            <WriteLevelScriptPacketParser> VAR response := SENDHTTPREQUEST("/light/0?green=" + Le*255);
 IF response.IsSuccess = false
  ADDERROR(response.StatusCode);
 END</WriteLevelScriptPacketParser>
            <IconId>3006</IconId>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Light</Name>
          <Model>PacketParserSwitch</Model>
          <Id>-8</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <NegateState>False</NegateState>
            <OnStateIconId>193</OnStateIconId>
            <OffStateIconId>194</OffStateIconId>
            <OnStateName>On</OnStateName>
            <OffStateName>Off</OffStateName>
            <ReadSwitchStateScriptPacketParser>#Simple HTTP Request:
VAR response := SENDHTTPREQUEST("/light/0");
IF response.IsSuccess
VAR content := response.Content;
 VAR responseHeaders := response.Headers;
 RETURN(PARSEJSON(content, "ison"));
ELSE
 ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
 RETURN(NaN);
END
#
# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/getValue", "GET", "some data", "header1:value1", "header2:value2", ...);
# OR
# VAR request := HTTPREQUEST("/example/getValue", "POST", "some data");
# request.headers := { "header1:value1", "header2:value2", ...};
# request.method := "GET";
# request.data := null;
# VAR response := SENDHTTPREQUEST(request);
#
#
# Send TCP, UDP data:
# VAR data1 := BYTECOLLECTION("0a bb ea df 01");
# SENDDATA(data1);
# VAR data2 := "{\"name\":\"John\", \"age\":32}";
# SENDDATA(data2);
# VAR data3 := TOBYTES("{\"name\":\"John\", \"age\":32}", "iso-8859-1");
# SENDDATA(data3);
# Process received TCP or UDP data and set device values in the Listener script
#
#
# Download data from FTP:
# FTPDOWNLOAD("filePath");</ReadSwitchStateScriptPacketParser>
            <WriteSwitchStateScriptPacketParser> var val := SWITCH(St, 0, "off", 1, "on", "off");
 VAR response := SENDHTTPREQUEST("/light/0?turn=" + val);
 IF response.IsSuccess = false
 ADDERROR(response.StatusCode);
 END
#
# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/setValue", "GET", "value=" + St, "header1:value1", "header2:value2", ...);\r
# Or VAR request := HTTPREQUEST("/example/setValue");
# request.Method := "PUT";
# VAR response := SENDHTTPREQUEST(request);
#r
#
# Send TCP, UDP data:
# VAR data1 := "{\"name\":\"John\", \"age\":" + St + "}";
# SENDDATA(data1);
# VAR data2 := TOBYTES("{\"name\":\"John\", \"age\":" + St + "}", "iso-8859-1");
# SENDDATA(data2);
# You can process received TCP or UDP data in the Listener script
#
#
# Upload data to FTP:
# FTPUPLOAD("filePath", "somedata=" + St, "write"); # use "append" mode to append data to existing file</WriteSwitchStateScriptPacketParser>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Mode</Name>
          <Model>PacketParserSwitch</Model>
          <Id>-9</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <NegateState>False</NegateState>
            <OnStateIconId>45</OnStateIconId>
            <OffStateIconId>66</OffStateIconId>
            <OnStateName>Color</OnStateName>
            <OffStateName>Light</OffStateName>
            <ReadSwitchStateScriptPacketParser># Simple HTTP Request:
 VAR response := SENDHTTPREQUEST("/light/0");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  var mod := SWITCH(PARSEJSON(content, "mode"), "white", 0, "color", 1, 0);
  return(mod);
 ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END
#
# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/getValue", "GET", "some data", "header1:value1", "header2:value2", ...);
# OR
# VAR request := HTTPREQUEST("/example/getValue", "POST", "some data");
# request.headers := { "header1:value1", "header2:value2", ...};
# request.method := "GET";
# request.data := null;
# VAR response := SENDHTTPREQUEST(request);
#
#
# Send TCP, UDP data:
# VAR data1 := BYTECOLLECTION("0a bb ea df 01");
# SENDDATA(data1);
# VAR data2 := "{\"name\":\"John\", \"age\":32}";
# SENDDATA(data2);
# VAR data3 := TOBYTES("{\"name\":\"John\", \"age\":32}", "iso-8859-1");
# SENDDATA(data3);
# Process received TCP or UDP data and set device values in the Listener script
#
#
# Download data from FTP:
# FTPDOWNLOAD("filePath");</ReadSwitchStateScriptPacketParser>
            <WriteSwitchStateScriptPacketParser># Simple HTTP Request:
var va := SWITCH(St, 1, "color", "white");
 VAR response := SENDHTTPREQUEST("/settings/?mode=" + va);
 IF response.IsSuccess = false
  ADDERROR(response.StatusCode);
 END
#
# Set Http request method, body and headers
# VAR response := SENDHTTPREQUEST("/example/setValue", "GET", "value=" + St, "header1:value1", "header2:value2", ...);\r
# Or VAR request := HTTPREQUEST("/example/setValue");
# request.Method := "PUT";
# VAR response := SENDHTTPREQUEST(request);
#r
#
# Send TCP, UDP data:
# VAR data1 := "{\"name\":\"John\", \"age\":" + St + "}";
# SENDDATA(data1);
# VAR data2 := TOBYTES("{\"name\":\"John\", \"age\":" + St + "}", "iso-8859-1");
# SENDDATA(data2);
# You can process received TCP or UDP data in the Listener script
#
#
# Upload data to FTP:
# FTPUPLOAD("filePath", "somedata=" + St, "write"); # use "append" mode to append data to existing file</WriteSwitchStateScriptPacketParser>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>Red</Name>
          <Model>PacketParserDimmer</Model>
          <Id>-10</Id>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ShouldDoPeriodicWrite>False</ShouldDoPeriodicWrite>
            <ReadLevelScriptPacketParser> VAR response := SENDHTTPREQUEST("/light/0");
 IF response.IsSuccess
  VAR content := response.Content;
  VAR responseHeaders := response.Headers;
  RETURN(PARSEJSON(content, "red")/255);
  ELSE
  ADDERROR(response.StatusCode + " (" + response.ReasonPhrase + ")");
  RETURN(NaN);
 END</ReadLevelScriptPacketParser>
            <WriteLevelScriptPacketParser>
 VAR response := SENDHTTPREQUEST("/light/0?red=" + Le*255);
 IF response.IsSuccess = false
  ADDERROR(response.StatusCode);
 END</WriteLevelScriptPacketParser>
            <IconId>3006</IconId>
          </DeviceProperties>
        </Device>
      </Devices>
    </Module>
  </Template>
</Templates>