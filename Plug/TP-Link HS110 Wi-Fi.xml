<?xml version="1.0" encoding="utf-8"?>
<Templates format="2" id="ab7b9505-29b6-4588-a375-1dff978e01da" protocolVersion="72">
  <Template revision="1.0">
    <SuggestedCCUParameters />
    <RevisionHistory>
      <Revision id="1.0">Initial version</Revision>
    </RevisionHistory>
    <Name>TP-Link HS110 Wi-Fi Module</Name>
    <CcuModel>PacketParserCCU</CcuModel>
    <Producer></Producer>
    <Model></Model>
    <Description></Description>
	<ImportParameters>
		<Parameter>
			<Name>${ipAddress}</Name>	
			<Value>192.168.0.1</Value>
			<Id>IpAddress</Id>
		</Parameter>
	</ImportParameters>
    <Module>
      <Name>TP-Link HS110 Wi-Fi Module</Name>
      <Model>PacketParserModuleTcp</Model>
      <DeviceProperties>
        <ReadScriptPacketParser>VAR payload := "{\"system\":{\"get_sysinfo\":{}}}";

VAR payloadLength := LENGTH(payload);
COLLECTION&lt;UINT8&gt; encrypted := {payloadLength &gt;&gt; 24, payloadLength &gt;&gt; 16, payloadLength &gt;&gt; 8, payloadLength};

INT i := 0;
UINT8 key := 171;

WHILE i &lt; payloadLength
    key := GETAT(payload, i) XOR key;
    encrypted := APPEND(encrypted, key);
    i += 1;
LOOP

SENDDATA(encrypted);</ReadScriptPacketParser>
        <InternalPollInterval>5000</InternalPollInterval>
        <CustomVariables>[{"Name":"SysInfoJson","ValueTypeId":2,"NumericValue":0,"StringValue":""},{"Name":"EMeterInfoJson","ValueTypeId":2,"NumericValue":0,"StringValue":""}]</CustomVariables>
        <ServiceAttributesScriptsPacketParser>[{"AttributeDefinition":{"Name":"SW version"},"ReadFormula":"PARSEJSON(SysInfoJson, \u0022$.sw_ver\u0022, 1);"},{"AttributeDefinition":{"Name":"HW version"},"ReadFormula":"PARSEJSON(SysInfoJson, \u0022$.hw_ver\u0022, 1);"},{"AttributeDefinition":{"Name":"Model"},"ReadFormula":"PARSEJSON(SysInfoJson, \u0022$.model\u0022, 0);"},{"AttributeDefinition":{"Name":"MAC address"},"ReadFormula":"PARSEJSON(SysInfoJson, \u0022$.mac\u0022, 0);"},{"AttributeDefinition":{"Name":"Signal strength (RSSI)"},"ReadFormula":"PARSEJSON(SysInfoJson, \u0022$.rssi\u0022, 0);"},{"AttributeDefinition":{"Name":"Voltage"},"ReadFormula":"VAR voltage := ROUND(PARSEJSON(EMeterInfoJson, \u0022$.voltage\u0022, 0));\r\nRETURN(voltage \u002B \u0022V\u0022);"}]</ServiceAttributesScriptsPacketParser>
        <ServiceActionsScriptsPacketParser>[{"ActionDefinition":{"Name":"Reboot","NumericParameters":[],"BoolParameters":[],"EnumParameters":[]},"Script":"VAR payload := \u0022{\\\u0022system\\\u0022:{\\\u0022reboot\\\u0022:{\\\u0022delay\\\u0022:1}}}\u0022;\r\n\r\nCOLLECTION\u003CUINT8\u003E encrypted;\r\nVAR payloadLength := LENGTH(payload);\r\n\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 24);\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 16);\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 8);\r\nencrypted := APPEND(encrypted, payloadLength);\r\n\r\nINT i := 0;\r\nUINT8 key := 171;\r\n\r\nWHILE i \u003C payloadLength\r\n    key := GETAT(payload, i) XOR key;\r\n    encrypted := APPEND(encrypted, key);\r\n    i \u002B= 1;\r\nLOOP\r\n\r\nSENDDATA(encrypted);\r\n\r\nRETURN(\u0022OK\u0022);"}]</ServiceActionsScriptsPacketParser>
		<ListenerScriptPacketParser>INT i := 4;
UINT8 key := 171;
COLLECTION&lt;UINT8&gt; payload;

WHILE i &lt; LENGTH(RECEIVEDBYTES)
    UINT8 b := GETAT(RECEIVEDBYTES, i);
    payload := APPEND(payload, b XOR key);
    key := b;
    i += 1;
LOOP

VAR json := TOSTRING(payload);
VAR sysInfo := PARSEJSON(payload, "$.system.get_sysinfo", 1);

IF sysInfo != null
    SysInfoJson := sysInfo;
ELSE
    VAR emeterInfo := PARSEJSON(payload, "$.emeter", 1);
    IF emeterInfo != NULL
        EMeterInfoJson := emeterInfo;
    END
END</ListenerScriptPacketParser>
        <IpAddress>$[IpAddress]</IpAddress>
        <Port>9999</Port>
        <StayConnected>False</StayConnected>
        <MessageFramingDefinition>{"Framing":0,"Configuration":""}</MessageFramingDefinition>
      </DeviceProperties>
      <Devices>
        <Device>
          <Name>TP-Link HS110 Wi-Fi Electric meter</Name>
          <Model>PacketParserElectricityMeter</Model>
          <DeviceProperties>
            <ReadScriptPacketParser>VAR payload := "{\"emeter\":{\"get_realtime\":{}}}";

VAR payloadLength := LENGTH(payload);
COLLECTION&lt;UINT8&gt; encrypted := {payloadLength &gt;&gt; 24, payloadLength &gt;&gt; 16, payloadLength &gt;&gt; 8, payloadLength};

INT i := 0;
UINT8 key := 171;

WHILE i &lt; payloadLength
    key := GETAT(payload, i) XOR key;
    encrypted := APPEND(encrypted, key);
    i += 1;
LOOP

SENDDATA(encrypted);</ReadScriptPacketParser>
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables />
            <ServiceAttributesScriptsPacketParser>[{"AttributeDefinition":{"Name":"Daily Consumption"},"ReadFormula":"VAR time := NOW();\r\nVAR payload := \u0022{\\\u0022emeter\\\u0022:{\\\u0022get_daystat\\\u0022:{\\\u0022month\\\u0022:\u0022 \u002B time.Month \u002B \u0022,\\\u0022year\\\u0022:\u0022 \u002B time.Year \u002B \u0022}}}\u0022;\r\n\r\nCOLLECTION\u003CUINT8\u003E encrypted;\r\nVAR payloadLength := LENGTH(payload);\r\n\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 24);\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 16);\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 8);\r\nencrypted := APPEND(encrypted, payloadLength);\r\n\r\nINT i := 0;\r\nUINT8 key := 171;\r\n\r\nWHILE i \u003C payloadLength\r\n    key := GETAT(payload, i) XOR key;\r\n    encrypted := APPEND(encrypted, key);\r\n    i \u002B= 1;\r\nLOOP\r\n\r\nSENDDATA(encrypted);\r\nRETURN(NULL);"},{"AttributeDefinition":{"Name":"Monthly Consumption"},"ReadFormula":"VAR time := NOW();\r\nVAR payload := \u0022{\\\u0022emeter\\\u0022:{\\\u0022get_monthstat\\\u0022:{\\\u0022year\\\u0022:\u0022 \u002B time.Year \u002B \u0022}}}\u0022;\r\n\r\nCOLLECTION\u003CUINT8\u003E encrypted;\r\nVAR payloadLength := LENGTH(payload);\r\n\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 24);\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 16);\r\nencrypted := APPEND(encrypted, payloadLength \u003E\u003E 8);\r\nencrypted := APPEND(encrypted, payloadLength);\r\n\r\nINT i := 0;\r\nUINT8 key := 171;\r\n\r\nWHILE i \u003C payloadLength\r\n    key := GETAT(payload, i) XOR key;\r\n    encrypted := APPEND(encrypted, key);\r\n    i \u002B= 1;\r\nLOOP\r\n\r\nSENDDATA(encrypted);\r\nRETURN(NULL);"}]</ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ListenerScriptPacketParser>IF EMeterInfoJson = NULL
    RETURN(0);
END

VAR emeterInfo := PARSEJSON(EMeterInfoJson, "$.get_realtime", 1);

IF emeterInfo != null
    Ed := PARSEJSON(emeterInfo, "$.power", 1) / 1000.0;
    To := PARSEJSON(emeterInfo, "$.total", 1);
END

VAR dateTime := NOW();
VAR dailyInfo := PARSEJSON(EMeterInfoJson, "$.get_daystat.day_list[?(@.day==" + dateTime.Day + ")]", 1);

IF dailyInfo != null
    VAR dailyConsumption := PARSEJSON(dailyInfo, "$.energy", 1);
    COMPLETESERVICEATTRIBUTE("Daily Consumption", dailyConsumption + "KWh");
END

VAR monthlyInfo := PARSEJSON(EMeterInfoJson, "$.get_monthstat.month_list[?(@.month==" + dateTime.Month + ")]", 1);

IF monthlyInfo != null
    VAR monthlyConsumption := PARSEJSON(monthlyInfo, "$.energy", 1);
    COMPLETESERVICEATTRIBUTE("Monthly Consumption", monthlyConsumption + "KWh");
END
</ListenerScriptPacketParser>
            <ReadTotalConsumptionScriptPacketParser></ReadTotalConsumptionScriptPacketParser>
            <ReadDemandScriptPacketParser></ReadDemandScriptPacketParser>
            <Calibration>0</Calibration>
          </DeviceProperties>
        </Device>
        <Device>
          <Name>TP-Link HS110 Wi-Fi Switch</Name>
          <Model>PacketParserSwitch</Model>
          <DeviceProperties>
            <ReadScriptPacketParser />
            <InternalPollInterval>2500</InternalPollInterval>
            <CustomVariables>[{"Name":"debounce","ValueTypeId":1,"NumericValue":0}]</CustomVariables>
            <ServiceAttributesScriptsPacketParser></ServiceAttributesScriptsPacketParser>
            <ServiceActionsScriptsPacketParser></ServiceActionsScriptsPacketParser>
            <ListenerScriptPacketParser>IF debounce &gt; 0
    debounce -= 1;
    RETURN(NaN);
END

VAR isOn := PARSEJSON(SysInfoJson, "$.relay_state", 1); 
St := IF(ISNULL(isOn), NaN, isOn);</ListenerScriptPacketParser>
            <NegateState>False</NegateState>
            <OnStateIconId>60</OnStateIconId>
            <OffStateIconId>61</OffStateIconId>
            <OnStateName>${general_on}</OnStateName>
            <OffStateName>${general_off}</OffStateName>
            <ReadSwitchStateScriptPacketParser></ReadSwitchStateScriptPacketParser>
            <WriteSwitchStateScriptPacketParser>VAR payload := "{\"system\":{\"set_relay_state\":{\"state\":" + St + "}}}";

VAR payloadLength := LENGTH(payload);
COLLECTION&lt;UINT8&gt; encrypted := {payloadLength &gt;&gt; 24, payloadLength &gt;&gt; 16, payloadLength &gt;&gt; 8, payloadLength};

INT i := 0;
UINT8 key := 171;

WHILE i &lt; payloadLength
    key := GETAT(payload, i) XOR key;
    encrypted := APPEND(encrypted, key);
    i += 1;
LOOP

SENDDATA(encrypted);
debounce := 1;</WriteSwitchStateScriptPacketParser>
          </DeviceProperties>
        </Device>
      </Devices>
    </Module>
  </Template>
</Templates>